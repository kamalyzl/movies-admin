{"version":3,"sources":["components/Header.js","components/Footer.js","components/Aside.js","components/List.js","components/Table.js","components/Modal.js","views/Home.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","icon","faUser","Footer","faAppleAlt","Aside","href","List","id","name","datePublic","status","onClickEdit","onClickTrash","faEdit","onClick","faTrash","nanoid","Tables","data","handleEdit","handleTrash","Table","striped","bordered","hover","responsive","map","item","key","fpublicaction","Modals","show","onHide","Modal","closeButton","Title","Body","Button","variant","date","Date","array","toLocaleString","App","useState","setShow","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2UAeeA,G,MAXA,WACb,OACE,4BAAQC,UAAU,UAChB,8BACA,0BAAMA,UAAU,QACd,kBAAC,IAAD,CAAiBC,KAAMC,UCMhBC,G,MAVA,WACb,OACE,4BAAQH,UAAU,UAChB,6BACE,kBAAC,IAAD,CAAiBC,KAAMG,UCoBhBC,EA3BD,WACZ,OACE,6BACE,wBAAIL,UAAU,UACZ,uBAAGM,KAAK,KACN,0CAEF,uBAAGA,KAAK,KACN,0CAEF,uBAAGA,KAAK,KACN,uCAEF,uBAAGA,KAAK,KACN,gDAEF,uBAAGA,KAAK,KACN,uCAEF,uBAAGA,KAAK,KACN,oD,yBCCKC,G,MAnBF,SAAC,GAAiE,IAA/DC,EAA8D,EAA9DA,GAAIC,EAA0D,EAA1DA,KAAMC,EAAoD,EAApDA,WAAYC,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACzD,OACE,4BACE,4BAAKL,GACL,4BAAKC,GACL,4BAAKC,GACL,4BAAKC,GACL,4BACE,uBAAGL,KAAK,KACN,kBAAC,IAAD,CAAiBL,KAAMa,IAAQC,QAASH,KAE1C,uBAAGN,KAAK,KACN,kBAAC,IAAD,CAAiBL,KAAMe,IAASD,QAASF,SCV7CL,EAAKS,MAoCIC,EAnCA,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,YAClC,OACE,yBAAKrB,UAAU,cACb,kBAACsB,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,YAAU,GACtC,+BACE,4BACE,iCACA,sCACA,oDACA,sCACA,mCAGJ,+BAEIP,GAAQA,EAAKQ,KAAI,SAACC,GAChB,OACE,kBAAC,EAAD,CACEC,IAAKrB,EACLA,GAAIoB,EAAKpB,GACTC,KAAMmB,EAAKnB,KACXE,OAAQiB,EAAKjB,OACbD,WAAYkB,EAAKE,cACjBlB,YAAaQ,EACbP,aAAcQ,W,gBCRjBU,EArBA,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACtB,OACE,oCACE,kBAACC,EAAA,EAAD,CAAOF,KAAMA,EAAMC,OAAQA,GACzB,kBAACC,EAAA,EAAMnC,OAAP,CAAcoC,aAAW,GACvB,kBAACD,EAAA,EAAME,MAAP,uBAEF,kBAACF,EAAA,EAAMG,KAAP,qDACA,kBAACH,EAAA,EAAM/B,OAAP,KACE,kBAACmC,EAAA,EAAD,CAAQC,QAAQ,YAAYxB,QAASkB,GAArC,SAGA,kBAACK,EAAA,EAAD,CAAQC,QAAQ,UAAUxB,QAASkB,GAAnC,oBCNJO,G,MAAO,IAAIC,MAEXC,EAAQ,CACZ,CACElC,GAAI,EACJC,KAAM,eACNqB,cAAeU,EAAKG,iBACpBhC,OAAQ,YAEV,CACEH,GAAI,EACJC,KAAM,sCACNqB,cAAeU,EAAKG,iBACpBhC,OAAQ,aA8BGiC,MA1Bf,WAAiB,IAAD,EACUC,oBAAS,GADnB,mBACPb,EADO,KACDc,EADC,KAMd,OACE,6BACE,kBAAC,EAAD,MACA,0BAAM9C,UAAU,QACd,kBAAC,EAAD,MACA,iCACE,yBAAKA,UAAU,SACb,yCACA,4BAAQe,QAVC,kBAAM+B,GAAQ,KAUvB,kBACA,kBAAC,EAAD,CAAQd,KAAMA,EAAMC,OAZV,kBAAMa,GAAQ,OAc1B,kBAAC,EAAD,CAAO3B,KAAMuB,EAAOtB,WAAY,aAAUC,YAAa,iBAG3D,kBAAC,EAAD,Q,MCjCSuB,MARf,WACE,OACE,yBAAK5C,UAAU,OACb,kBAAC,EAAD,QCKc+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e20739f8.chunk.js","sourcesContent":["import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUser } from '@fortawesome/free-solid-svg-icons'\nimport '../css/Header.css'\nconst Header = () => {\n  return (\n    <header className='header'>\n      <div />\n      <span className='icon'>\n        <FontAwesomeIcon icon={faUser} />\n      </span>\n    </header>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faAppleAlt } from '@fortawesome/free-solid-svg-icons'\nimport '../css/Footer.css'\n\nconst Footer = () => {\n  return (\n    <footer className='footer'>\n      <div>\n        <FontAwesomeIcon icon={faAppleAlt} />\n      </div>\n    </footer>\n  )\n}\n\nexport default Footer\n","import React from 'react'\n\nconst Aside = () => {\n  return (\n    <nav>\n      <ul className='nav-ul'>\n        <a href='#'>\n          <li>Dashboard</li>\n        </a>\n        <a href='#'>\n          <li>Peliculas</li>\n        </a>\n        <a href='#'>\n          <li>Turnos</li>\n        </a>\n        <a href='#'>\n          <li>Administradores</li>\n        </a>\n        <a href='#'>\n          <li>Perfil</li>\n        </a>\n        <a href='#'>\n          <li>Cerrar Sesi√≥n</li>\n        </a>\n      </ul>\n    </nav>\n  )\n}\n\nexport default Aside\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faEdit, faTrash } from '@fortawesome/free-solid-svg-icons'\n\nconst List = ({ id, name, datePublic, status, onClickEdit, onClickTrash }) => {\n  return (\n    <tr>\n      <td>{id}</td>\n      <td>{name}</td>\n      <td>{datePublic}</td>\n      <td>{status}</td>\n      <td>\n        <a href='#'>\n          <FontAwesomeIcon icon={faEdit} onClick={onClickEdit} />\n        </a>\n        <a href='#'>\n          <FontAwesomeIcon icon={faTrash} onClick={onClickTrash} />\n        </a>\n      </td>\n    </tr>\n  )\n}\n\nexport default List\n","import React from 'react'\nimport { Table } from 'react-bootstrap'\nimport nanoid from 'nanoid'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport List from './List'\n\nconst id = nanoid()\nconst Tables = ({ data, handleEdit, handleTrash }) => {\n  return (\n    <div className='table-list'>\n      <Table striped bordered hover responsive>\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>Nombre</th>\n            <th>Fecha de publicacion</th>\n            <th>Estado</th>\n            <th>.</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            data && data.map((item) => {\n              return (\n                <List\n                  key={id}\n                  id={item.id}\n                  name={item.name}\n                  status={item.status}\n                  datePublic={item.fpublicaction}\n                  onClickEdit={handleEdit}\n                  onClickTrash={handleTrash}\n                />\n              )\n            })\n          }\n        </tbody>\n      </Table>\n    </div>\n  )\n}\n\nexport default Tables\n","import { Modal, Button } from 'react-bootstrap'\nimport React from 'react'\nconst Modals = ({ show, onHide }) => {\n  return (\n    <>\n      <Modal show={show} onHide={onHide}>\n        <Modal.Header closeButton>\n          <Modal.Title>Modal heading</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\n        <Modal.Footer>\n          <Button variant='secondary' onClick={onHide}>\n            Close\n          </Button>\n          <Button variant='primary' onClick={onHide}>\n            Save Changes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  )\n}\n\nexport default Modals\n","import React, { useState } from 'react'\nimport Header from '../components/Header'\nimport Footer from '../components/Footer'\nimport Aside from '../components/Aside'\nimport Table from '../components/Table'\nimport Modals from '../components/Modal'\nimport '../css/Home.css'\n\nconst date = new Date()\n\nconst array = [\n  {\n    id: 1,\n    name: 'Jason Bourne',\n    fpublicaction: date.toLocaleString(),\n    status: 'Inactivo'\n  },\n  {\n    id: 1,\n    name: 'Alicia en el pais de las maravillas',\n    fpublicaction: date.toLocaleString(),\n    status: 'Inactivo'\n  }\n]\n\nfunction App () {\n  const [show, setShow] = useState(false)\n\n  const handleClose = () => setShow(false)\n  const handleShow = () => setShow(true)\n\n  return (\n    <div>\n      <Header />\n      <main className='main'>\n        <Aside />\n        <section>\n          <div className='first'>\n            <h2>Peliculas</h2>\n            <button onClick={handleShow}>Nueva Pelicula</button>\n            <Modals show={show} onHide={handleClose} />\n          </div>\n          <Table data={array} handleEdit={() => {}} handleTrash={() => {}} />\n        </section>\n      </main>\n      <Footer />\n\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport Home from './views/Home'\nimport './App.css'\n\nfunction App () {\n  return (\n    <div className='App'>\n      <Home />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}